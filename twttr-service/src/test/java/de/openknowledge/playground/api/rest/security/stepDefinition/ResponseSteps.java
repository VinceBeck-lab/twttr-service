package de.openknowledge.playground.api.rest.security.stepDefinition;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import cucumber.api.java.en.Then;
import de.openknowledge.playground.api.rest.security.domain.tweet.TweetDTO;
import de.openknowledge.playground.api.rest.security.supportCode.SharedDomain;
import de.openknowledge.playground.api.rest.security.supportCode.converter.convertedClasses.ErrorMessage;
import de.openknowledge.playground.api.rest.security.domain.accounts.UserDTO;
import io.restassured.response.Response;
import org.hamcrest.Matchers;

import javax.ws.rs.core.MediaType;
import java.io.IOException;
import java.util.List;

public class ResponseSteps {
    private SharedDomain domain;

    public ResponseSteps (SharedDomain domain) {
        this.domain = domain;
    }


    @Then("the HTTP response body contains following JSON of an error message:")
    public void the_HTTP_response_body_contains_following_JSON_of_an_error_message(ErrorMessage expectedErrorMessage) {
        domain.getResponse().then()
                .contentType(MediaType.APPLICATION_JSON)
                .body("errorMessage", Matchers.equalTo(expectedErrorMessage.getErrorMessage()));
    }

    @Then("the HTTP response status-code will be {int}")
    public void the_HTTP_response_status_code_will_be(Integer expectedStatusCode) {
        Response response = domain.getResponse();
        response.then()
                .statusCode(expectedStatusCode);
    }

    @Then("the HTTP response body contains following JSON of a new Tweet, while the tweetId and the publish-date got generated by the system")
    public void the_HTTP_response_body_contains_following_JSON_of_a_new_Tweet_while_the_tweetId_and_the_publish_date_got_generated_by_the_system(TweetDTO expectedTweet) {
        domain.getResponse().then()
                .contentType(MediaType.APPLICATION_JSON)
                .body("content", Matchers.equalTo(expectedTweet.getContent()))
                .body("author.firstName", Matchers.equalTo(expectedTweet.getAuthor().getFirstName()))
                .body("author.lastName", Matchers.equalTo(expectedTweet.getAuthor().getLastName()))
                .body("author.role", Matchers.equalTo(expectedTweet.getAuthor().getRole().toString()))
                .body("rootTweet", Matchers.isEmptyOrNullString());
    }


    @Then("the HTTP response body contains following JSON of the follower from user john")
    public void the_HTTP_response_body_contains_following_JSON_of_the_follower_from_user_john(String expectedJson) {
        try {
            List<UserDTO> users = new ObjectMapper().readValue(expectedJson, new TypeReference<List<UserDTO>>() {});
            domain.getResponse().then()
                    .contentType(MediaType.APPLICATION_JSON)
                    .body("[0].userId", Matchers.equalTo(users.get(0).getUserId()));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
