package de.openknowledge.twttrService.api.rest.stepDefinitions;

import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;
import de.openknowledge.twttrService.api.rest.supportCode.IntegrationTestUtil;
import de.openknowledge.twttrService.api.rest.supportCode.SharedDomain;
import de.openknowledge.twttrService.api.rest.supportCode.domain.TweetDTO;
import de.openknowledge.twttrService.api.rest.supportCode.domain.TweetEntity;
import de.openknowledge.twttrService.api.rest.supportCode.dataBase.DBConnection;
import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.hamcrest.Matchers;

import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.MediaType;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;

public class RetweetTweetSteps {

    private SharedDomain domain;
    public RetweetTweetSteps(SharedDomain domain) {
        this.domain = domain;
    }


    @Given("a stored retweet with id 2 from a tweet with id 1")
    public void a_stored_retweet_with_id_from_a_tweet_with_id() {
        List<TweetEntity> tweets = new LinkedList<>();

        TweetEntity entity = TweetEntity.builderInstance()
                .withTweetId(1)
                .withContent("Example content")
                .withPubDate(new Date(System.currentTimeMillis()-1000))
                .withState(0)
                .withAuthorId(0)
                .build();
        tweets.add(entity);

        entity = TweetEntity.builderInstance()
                .withTweetId(2)
                .withContent("Example content")
                .withPubDate(new Date(System.currentTimeMillis()))
                .withState(0)
                .withAuthorId(1)
                .withRootTweetId(1)
                .build();
        tweets.add(entity);

        DBConnection.insertTweets(tweets);
    }


    @When("a client sends a POST {string} request for (user|moderator) {string} to retweet the specified (tweet|retweet)")
    public void a_client_sends_a_POST_request_for_user_to_retweet_the_specified_tweet(String additionalPath, String userName) {
        Response response = RestAssured
                .given()
                .accept(MediaType.APPLICATION_JSON)
                .contentType(MediaType.APPLICATION_JSON)
                .header(HttpHeaders.AUTHORIZATION, "Bearer " + domain.tokenFromAccount(userName))
                .when()
                .post(IntegrationTestUtil.getBaseURI() + additionalPath);
        domain.setResponse(response);
    }

    @When("a client sends a POST {string} request without a valid token to retweet the specified tweet")
    public void a_client_sends_a_POST_request_without_a_valid_token_to_retweet_the_specified_tweet(String additionalPath) {
        String randomToken = "XXX";

        Response response = RestAssured
                .given()
                .accept(MediaType.APPLICATION_JSON)
                .contentType(MediaType.APPLICATION_JSON)
                .header(HttpHeaders.AUTHORIZATION, "Bearer " + randomToken)
                .when()
                .post(IntegrationTestUtil.getBaseURI() + additionalPath);
        domain.setResponse(response);
    }


    @Then("the HTTP response body contains following JSON of a new retweet from tweet with id {int}, while the tweetId and the publish-date got generated by the system")
    public void the_HTTP_response_body_contains_following_JSON_of_a_new_retweet_from_tweet_with_id_while_the_tweetId_and_the_publish_date_got_generated_by_the_system(Integer expectedRootTweetId, TweetDTO expectedTweet) {
        domain.getResponse().then()
                .contentType(MediaType.APPLICATION_JSON)
                .body("content", Matchers.equalTo(expectedTweet.getContent()))
                .body("author.firstName", Matchers.equalTo(expectedTweet.getAuthor().getFirstName()))
                .body("author.lastName", Matchers.equalTo(expectedTweet.getAuthor().getLastName()))
                .body("author.role", Matchers.equalTo(expectedTweet.getAuthor().getRole().toString()))
                .body("rootTweet.tweetId", Matchers.equalTo(expectedRootTweetId));
    }

    @Then("the responded retweet is a retweet of the tweet with id {int}")
    public void the_new_created_retweet_is_a_retweet_of_the_tweet_with_id(Integer expectedRootTweetId) {
        domain.getResponse().then()
                .body("rootTweet.tweetId", Matchers.equalTo(expectedRootTweetId));
    }
}
